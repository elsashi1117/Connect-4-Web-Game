{"version":3,"sources":["component/Cell.js","component/Row.js","logic/logic.js","App.js","index.js"],"names":["Cell","_ref","clickBoard","cellIndex","color","rowIndex","react_default","a","createElement","className","onClick","Row","row","map","cell","i","component_Cell","key","checkAll","board","r","c","j","count","length","checkHorizontal","checkVertical","console","log","checkTopDiagonal","checkBottomDiagonal","checkDraw","App","state","msg","curPlayer","gameOver","initBoard","newBoard","Array","fill","_this","setState","_this$state","res","concat","this","_this2","_this$state2","src","alt","component_Row","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.84feb395.chunk.js","sourcesContent":["import React from 'react';\n\nconst Cell = ({clickBoard, cellIndex, color, rowIndex}) => {\n    return (\n        <td>\n            <div className=\"cell\" onClick={()=>clickBoard(rowIndex, cellIndex)}>\n                <div className={\"outer circle \" + (color)}>\n                {color && <div className={\"inner circle \" + (color)}></div>}\n\n                </div>\n            </div>\n        </td>\n    )\n}\n\nexport default Cell;","import React from 'react';\nimport Cell from './Cell'\n\nconst Row = ({row, clickBoard, rowIndex}) => {\n    // console.log(row)\n    return (\n        <tr>\n           {row.map((cell,i) => (\n               <Cell \n               key={i} \n               cellIndex={i} \n               color={cell}\n               rowIndex={rowIndex} \n               clickBoard={clickBoard}/>\n           ))}\n        </tr>\n    )\n}\n\nexport default Row;","export const checkHorizontal = (board, r, c) => {\n    let j = c, count = 1;\n    while (j > 0) {\n        if (board[r][j] === board[r][j-1]) {\n            count++;\n            j--;\n        } else break;\n    }\n    j = c;\n    while (j < board[r].length - 1) {\n        if (board[r][j] === board[r][j+1]) {\n            count++;\n            j++;\n        } else break;\n    } \n    if (count >= 4 ) {\n        return board[r][c];\n    } else return null;\n}\n\nexport const checkVertical = (board, r, c) => {\n    let i = r, count = 1;\n    while (r > 0) {\n        if (board[i][c] === board[i-1][c]) {\n            count++;\n            i--;\n        } else break;\n    }\n    i = r;\n    while (i < board.length - 1) {\n        if (board[i][c] === board[i+1][c]) {\n            count++;\n            i++;\n        } else break;\n    } \n    if (count >= 4 ) {\n        return board[r][c];\n    } else return null;\n    // for (let j = 0; j < board[0].length; j++) {\n    //     let count = 1, pre = board[0][j];\n    //     for (let i = 1; i < board.length; i++) {\n    //       if (board[i][j] === pre && board[i][j]!== null) {\n    //           count++;\n    //           if (count === 4) {\n    //               return board[i][j];\n    //           }\n    //       } else {\n    //           pre = board[i][j];\n    //           count = 1;\n    //       }\n    //     }\n    // }\n    // return null;\n}\n\n// const checkTopDiagonal2 = (board, r, c, number) => {\n//     let height = board.length;\n//     let width = board[0].length;\n//     let cnt = 1;\n//     for(let i = 1; i < number; ++i) {\n//         let cur_r = r-i, cur_c = c-i;\n//         if(cur_r < 0 || cur_r >= height ||\n//            cur_c < 0 || cur_c >= width) {\n//             continue;\n//         }\n//         if(board[cur_r][cur_c] === board[r][c]) {\n//             cnt += 1;\n//             if(cnt >= number) {\n//                 return board[r][c];\n//             }\n//         }\n//     }\n\n//     for(let i = 1; i < number; ++i) {\n//         let cur_r = r+i, cur_c = c+i;\n//         if(cur_r < 0 || cur_r >= height ||\n//            cur_c < 0 || cur_c >= width) {\n//             continue;\n//         }\n//         if(board[cur_r][cur_c] === board[r][c]) {\n//             cnt += 1;\n//             if(cnt >= number) {\n//                 return board[r][c];\n//             }\n//         }\n//     }\n//     return null;\n// }\n\nexport const checkTopDiagonal = (board, r, c) => { \n    let i = r, j = c, count = 1;\n    while (i > 0 && j > 0) {\n        if (board[i][j] === board[i-1][j-1]) {\n            count++;\n            i--;\n            j--;\n        } else break;\n    }\n    i = r;\n    j = c;\n    while (i < board.length - 1 && j < board[r].length - 1) {\n        if (board[i][j] === board[i+1][j+1]) {\n            console.log('ctn:',count)\n            count++;\n            i++;\n            j++;\n        } else break;\n    } \n    if (count >= 4 ) {\n        return board[r][c];\n    } else return null; \n}\n\nexport const checkBottomDiagonal = (board, r, c) => {\n    let i = r, j = c, count = 1;\n    while (i < board.length - 1 && j > 0) {\n        if (board[i][j] === board[i + 1][j - 1]) {\n            count++;\n            i++;\n            j--;\n        } else break;\n    }\n    i = r;\n     j = c;\n    while (i > 0 && j < board[r].length - 1) {\n        if (board[i][j] === board[i - 1][j + 1]) {\n            count++;\n            i--;\n            j++;\n        } else break;\n    }\n    if (count >= 4) {\n        return board[r][c];\n    } else return null;\n}\n\nexport const checkDraw = board => {\n    for (let i = 0; i < board.length; i++) {\n        for (let j = 0; j < board[i].length; j++) {\n            if (board[i][j] === null) {\n                return null;\n            }\n        }\n    }\n    return \"draw\";\n}\n\nexport const checkAll = (board, r, c) => {\n    return checkHorizontal(board, r, c) || checkVertical(board) || checkTopDiagonal(board, r, c) || checkBottomDiagonal(board, r, c) || checkDraw(board);\n}\n\n","import React, { Component } from 'react';\nimport Row from './component/Row';\nimport { checkAll } from './logic/logic';\n\nimport './App.css';\n\n\nclass App extends Component {\n  state = {\n    board: [],\n    msg: 'Player 1, please select a coin spot',\n    curPlayer: null,\n    gameOver: false,\n  }\n\n  initBoard = () => {\n    let newBoard = new Array(6).fill(null).map(\n      () => new Array(7).fill(null)\n    );\n    this.setState({\n      board: newBoard,\n      gameOver: false,\n      msg: 'Player 1, please select a coin spot',\n      curPlayer: 'orange' // curPlayer is the next player\n    });\n  };\n\n  componentDidMount() {\n    this.initBoard();\n  }\n\n  clickBoard = (r, c) => {\n    const { gameOver, curPlayer, board } = this.state;\n    if (!gameOver) {\n\n      let newBoard = board;\n      if (newBoard[r][c] !== null) return;\n      newBoard[r][c] = curPlayer === 'purple' ? 'purple' : 'orange';\n      this.setState({\n        curPlayer: curPlayer === 'orange' ? 'purple' : 'orange',\n        board: newBoard,\n        msg: newBoard[r][c] === 'orange' ? 'Player 2, please select a coin spot' : 'Player 1, please select a coin spot'\n      })\n      let res = checkAll(board, r, c);\n\n      if (res === 'orange') {\n        this.setState({\n          msg: `${'Player 1'} wins !!!`,\n          curPlayer: res,\n          gameOver: true\n        })\n      } else if (res === 'purple') {\n        this.setState({\n          msg: `${'Player 2'} wins !!!`,\n          curPlayer: res,\n          gameOver: true\n        })\n      } else if (res === 'draw') {\n        this.setState({\n          msg: 'Draw Game',\n          curPlayer: res,\n          gameOver: true\n        })\n      }\n    } else {\n      this.setState({ msg: 'Game over. Please start a new game.' });\n    }\n  }\n\n  render() {\n    const { board, msg, gameOver, curPlayer } = this.state;\n    return (\n      <div className=\"App\">\n        {gameOver &&\n          <img src={'https://media1.giphy.com/media/l0Exj6t3iK0Xzv00E/source.gif'} alt='win' />\n        }\n        <div>\n          <p className={'msg ' + (curPlayer)}>{msg}</p>\n        </div>\n        <table>\n          <thead></thead>\n          <tbody>\n            {board.map((row, i) => (\n              <Row\n                key={i}\n                row={row}\n                rowIndex={i}\n                clickBoard={this.clickBoard}\n              />\n            ))}\n          </tbody>\n        </table>\n        <button onClick={this.initBoard}>Reset</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}